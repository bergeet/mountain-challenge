// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum ChallengeType {
  RUNNING
  WEIGHTLOSS
}

model User {
  id                String              @id @default(cuid())
  name              String?
  password          String
  challengeType     ChallengeType
  checkInRunning    CheckInRunning[]
  checkInWeightLoss CheckInWeightLoss[]
  Challenge         Challenge?          @relation(fields: [challengeId], references: [id])
  challengeId       String?
  UserDetails       UserDetails[]
  Achievement       Achievement[]
}

model CheckInRunning {
  id                    String        @id @default(cuid())
  userId                String
  createdAt             DateTime      @default(dbgenerated("CURRENT_DATE")) @db.Date
  updatedAt             DateTime      @updatedAt
  user                  User          @relation(fields: [userId], references: [id])
  walkingMinutes        Int
  minutes               Float
  km                    Float
  challengeType         ChallengeType
  checkPointMileMinutes Float?

  @@unique([userId, createdAt])
}

model CheckInWeightLoss {
  id               String        @id @default(cuid())
  userId           String
  createdAt        DateTime      @default(dbgenerated("CURRENT_DATE")) @db.Date
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
  walkingMinutes   Int
  ateLunch         Boolean
  ateDinner        Boolean
  ateSugar         Boolean
  checkPointWeight Float?
  challengeType    ChallengeType
  wentToGym        Boolean

  @@unique([userId, createdAt])
}

model Challenge {
  id          String        @id @default(cuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  type        ChallengeType
  users       User[]
}

model UserDetails {
  id         String @id @default(cuid())
  userId     String
  user       User   @relation(fields: [userId], references: [id])
  fiveKmTime Float
  tenKmTime  Float
  weight     Float
}

model AchievementType {
  id          String        @id @default(cuid())
  name        String
  description String
  points      Int
  Achievement Achievement[]
}

model Achievement {
  id                String          @id @default(cuid())
  userId            String
  createdAt         DateTime        @default(dbgenerated("CURRENT_DATE")) @db.Date
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id])
  achievementType   AchievementType @relation(fields: [achievementTypeId], references: [id])
  achievementTypeId String
  points            Int
  challengeType     ChallengeType

  @@unique([userId, createdAt])
}
